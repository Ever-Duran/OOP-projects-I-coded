#I don't own this code. It's an example I got at ESIT

#!/usr/bin/env python
#Ejemplo de metodo protegido y atributo en Python
class MyClass:
    def init(self):
            self._protected_attribute = "Esto es un atributo protegido"
    def _protected_method(self):
        print("Esto es un método protegido")

#**********

#!/usr/bin/env python
#Ejemplo de aplicación de métodos finales en Python
from typing import final

class BaseClass:
    @final
    def final_method(self):
        print("Este metodo no se puede anular.")

clases SubClass(BaseClass):
    def final_method(self): #Esto generará una advertencia en algunos IDE, pero Python no lo aplica

    print("Tratando de anular")


#***********

#!/usr/bin/env python
###Ejemplo completo
from typing import final

class BaseClass:
    def init(self):
        self._protected_attribute = "Esto es un atributo protegido"
    def _protected_method(self):
        print("Esto es un método protegido")


    @final
    def final_method(self):
        print("Este método no se puede anular")

class SubClass(BaseClass):
    def some_method(self):
        print(self._protected_attribute) #Accesando al atributo protegido
self._protected_method() #llamando al método protegido

#Si desconectas el siguiente método generaría una advertencia en algunos IDE
#def final_method(self):
#print("Intentando anular")

#usage
obj = SubClass()
obj.some_method()


****************
#Multiple inheritance and interfaces

class A:
    def method_a(self):
        print("Imprimiendo el, método de A")

class B:
    def method_b(self):
        print("Imprimiendo el, método de B")

class C(A, B):
    def method_c(self):
        print("Imprimiendo en método de C")


#Crear instancia de la clase C
obj = C()

#Llamar a los métodos de las clases A, B y C

obj.method_a() #Salida: Method A
obj.method_b() #Salida: Method B
obj.method_c() #Salida: Method C




